---
- name: Proccess AS3 from incoming trigger
  hosts: localhost
  connection: local
  vars:
    provider:
      server: "{{ hostvars[inventory_hostname].bigip_mgmt }}"
      user: admin
      password: "{{ f5adminpassword }}"
      validate_certs: false
      server_port: 443
  gather_facts: false
  any_errors_fatal: true
## Overview:
## Part 1: Save incoming JSON items to github repository
## Part 2: Post AS3 JSON to F5 VEs
  tasks:
    ##Part 1: Save incoming AS3 declaration to github repository

#    - name: clone git repo
#      shell: git clone git@github.com:megamattzilla/concord-as3-import.git
         
    - name: Create base files directory if it does not exist
      ansible.builtin.file:
        path: "{{ playbook_dir }}/files"
        state: directory
        mode: '0755'
      run_once: true
    
    ## Load JSON items from file if this playbook is being ran outside of concord flow  
    - name: Load JSON items from file if this playbook is being ran outside of concord flow
      set_fact: "as3_inputs={{ lookup('file', 'scratch.json') }}"
      run_once: true
      when: as3_inputs is not defined

    - name: Create per-tenant file directory if it does not exist
      ansible.builtin.file:
        path: "{{ playbook_dir }}/files/{{ item.environment }}"
        state: directory
        mode: '0755'
      loop: "{{ as3_inputs }}"
      loop_control:        
        label: "{{ item.tenant }}"
      run_once: true

    ## Create .JSON file for tenants  
    - name: Create .JSON file for tenants 
      ansible.builtin.copy:
        content: "{{ item | to_nice_json }}"
        dest: "{{ playbook_dir }}/files/{{ item.environment }}/tenant-{{ item.tenant }}.json"
      loop: "{{ as3_inputs }}"
      loop_control:        
        label: "{{ item.tenant }}"
      run_once: true

    ## Find n-number tenant files
    - name: Find Tenant .JSON files
      find:
        paths: "files/"
        patterns: 'tenant*'
        recurse: yes
      register: findOutput    
      run_once: true

    ## Set empty JSON document
    - set_fact: 
        tenants_list: []
      run_once: true
    
    - name: Add contents of each JSON file to the list
      set_fact:
        tenants_list: "{{ tenants_list + [lookup('file', item.path) | from_json] }}"
      loop: "{{ findOutput.files }}"
   
    - name: Create the final combined dictionary
      set_fact:
        tenants: "{{ tenants_list }}"    

    - name: Build AS3 declaration
      template:
        src: "{{ playbook_dir }}/templates/as3.j2"
        dest: "{{ playbook_dir }}/files/example2-AS3.json"

    - name: Print AS3 Declaration
      debug: 
        msg: "{{ lookup('file', 'files/example2-AS3.json') }}"
    ## Part 2: Post original JSON to F5 VEs
    ## Note: this can be modified later to POST the reconstructed JSON from github if needed. See update_as3.yml playbook for that code.  

    # - name: POST AS3 declaration to F5 VE
    #   uri:
    #     url: "https://{{ hostvars[inventory_hostname].bigip_mgmt }}:{{ port | default('443')}}/mgmt/shared/appsvcs/declare"
    #     user: "{{ provider.user }}"
    #     password: "{{ f5adminpassword }}"
    #     validate_certs: false
    #     force_basic_auth: yes
    #     method: POST
    #     timeout: 180
    #     body_format: json
    #     body: "{{ as3_inputs  }}"
    #     return_content: yes
    #     status_code: [ 200, 202]
    #   register: as3id

    # - name: Get async task status (skipped if AS3 task completed)
    #   uri:
    #     url: "https://{{ hostvars[inventory_hostname].bigip_mgmt }}:{{ port | default('443')}}/mgmt/shared/appsvcs/task/{{ as3id.json.id }}"
    #     user: "{{ provider.user }}"
    #     password: "{{ f5adminpassword }}"
    #     validate_certs: false
    #     force_basic_auth: yes
    #     method: GET
    #     return_content: yes
    #     status_code: 200
    #   register: patchtaskstatus
    #   until: patchtaskstatus.json.results[0].message == 'success'
    #   retries: 60 # retry X times  
    #   delay: 2 # pause for X sec b/w each call
    #   when:  as3id.status == 202